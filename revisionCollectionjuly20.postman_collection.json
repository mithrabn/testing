{
	"info": {
		"_postman_id": "53871c26-f5ab-4a67-aa8d-1e5467caf87a",
		"name": "revisionCollectionjuly20",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17342475",
		"_collection_link": "https://mitpostmanteam.postman.co/workspace/MithraLearningPostMan~01fbd723-c8db-4b03-878c-1e4d787558e4/collection/17342475-53871c26-f5ab-4a67-aa8d-1e5467caf87a?action=share&creator=17342475&source=collection_link"
	},
	"item": [
		{
			"name": "AddBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsres=pm.response.json();\r",
							"const jsreq=JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"bookidgeneration validation\", function()\r",
							"{\r",
							"   // const expected=pm.collectionVariables.get(\"ISBN\")+pm.collectionVariables.get(\"bookisle\");\r",
							"   const expected=pm.collectionVariables.get(\"ISBN\")+jsreq.aisle;\r",
							"    pm.expect(jsres.ID).to.be.eql(expected);\r",
							"console.log(\"expected value \"+expected);\r",
							"console.log(\"actual value \"+jsres.ID);\r",
							"});\r",
							"function cleanupscript()\r",
							"{\r",
							"    const bookidcleanup=generatebookid();\r",
							"    pm.environment.set(\"revbookid2\",bookidcleanup);\r",
							"    postman.setNextRequest(DeleteBook);\r",
							"}\r",
							"function generatebookid()\r",
							"{\r",
							"    return jsreq.isbn+jsreq.aisle;\r",
							"}\r",
							"pm.test(\"checkingstatuscode\",function()\r",
							"{\r",
							"    try{\r",
							"        pm.response.to.have.status(200);\r",
							"       }\r",
							"    catch(err)\r",
							"    {\r",
							"        if(jsres.msg.includes(\"exists\"))\r",
							"        cleanupscript();\r",
							"    }\r",
							"\r",
							"});\r",
							"const jsonresponse=pm.response.json();\r",
							"const bookid=jsonresponse.ID;\r",
							"console.log(bookid);\r",
							"pm.environment.set(\"revbookid2\",bookid);\r",
							"pm.test(\"tocheckproperties\",function(){\r",
							"//pm.response.to.have.property(\"ID\");\r",
							"pm.expect(jsonresponse).to.have.property(\"Msg\");\r",
							"});\r",
							"pm.test(\"checkcontentofresponseproperty\",function()\r",
							"{\r",
							"    pm.expect(jsonresponse.Msg).to.eql(\"successfully added\");\r",
							"});\r",
							"pm.test(\"header validations\",function(){\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json;charset=UTF-8\");\r",
							"    pm.expect(pm.response.text()).to.contain(\"successfully\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const constval=pm.globals.get(\"BK\");\r",
							"const randomval=pm.variables.replaceIn('{{$randomInt}}')\r",
							"pm.collectionVariables.set(\"ISBN\",constval+randomval);\r",
							"pm.collectionVariables.set(\"bookname\",pm.iterationData.get(\"csvbookname\"));\r",
							"pm.collectionVariables.set(\"bookauthor\",pm.iterationData.get(\"csvbookauthor\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\":\"{{bookname}}\",\r\n\"isbn\":\"{{ISBN}}\",\r\n\"aisle\":\"{{bookisle}}\",\r\n\"author\":\"{{bookauthor}}\"\r\n} \r\n"
				},
				"url": {
					"raw": "{{base_url}}/Library/Addbook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonresponse=pm.response.json();\r",
							"const jsonsch=\r",
							"{ \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"book_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isbn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"aisle\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"author\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"book_name\",\r",
							"        \"isbn\",\r",
							"        \"aisle\",\r",
							"        \"author\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"};\r",
							"pm.test(\"schemavalidation\",function()\r",
							"{\r",
							"pm.response.to.have.jsonSchema(jsonsch);\r",
							"});\r",
							"pm.test(\"statuscode\",function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"checkresponseproperties\",function(){\r",
							"    pm.expect(jsonresponse[0]).to.have.property(\"book_name\");\r",
							"    pm.expect(jsonresponse[0]).to.have.property(\"isbn\");\r",
							"    pm.expect(jsonresponse[0]).to.have.property(\"aisle\");\r",
							"    pm.expect(jsonresponse[0]).to.have.property(\"author\");\r",
							"});\r",
							"pm.test(\"validate bookdetails\",function(){\r",
							"    pm.expect(jsonresponse[0].book_name).to.be.eql(pm.collectionVariables.get(\"bookname\"));\r",
							"    pm.expect(jsonresponse[0].isbn).to.be.eql(pm.collectionVariables.get(\"ISBN\"));\r",
							"    pm.expect(jsonresponse[0].aisle).to.be.eql(pm.collectionVariables.get(\"bookisle\"));\r",
							"    pm.expect(jsonresponse[0].author).to.be.eql(pm.collectionVariables.get(\"bookauthor\"));\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?ID={{revbookid2}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{revbookid2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBook",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"validations\",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"    const jsresponse=pm.response.json();\r",
							"    pm.expect(jsresponse.msg).contains(\"successfully deleted\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \r\n\"ID\" : \"{{revbookid2}}\"\r\n \r\n} \r\n"
				},
				"url": {
					"raw": "{{base_url}}/Library/DeleteBook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ISBN",
			"value": "",
			"type": "string"
		},
		{
			"key": "bookname",
			"value": "somebookbymit",
			"type": "string"
		},
		{
			"key": "bookisle",
			"value": "100",
			"type": "string"
		},
		{
			"key": "bookauthor",
			"value": "",
			"type": "string"
		}
	]
}